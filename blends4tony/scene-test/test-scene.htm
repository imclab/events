<!DOCTYPE html>
<html lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
<title>three.js webgl - io - scene loader [blender]</title>
<meta charset="utf-8">
<meta name="viewport" content="width=device-width, user-scalable=no, minimum-scale=1.0, maximum-scale=1.0">
<style>
body {
	background:#FFF;
	color:#fff;
	padding:0;
	margin:0;
	overflow:hidden;
	font-family:georgia;
	text-align:center;
}
#button {
	position: absolute;
	left: 10px;
	top: 10px;
}
</style>
</head>

<body>
<button id="button">create clone</button>

<script src="./three.js webgl - io - scene loader [blender]_files/three.min.js"></script>
<script src="./three.js webgl - io - scene loader [blender]_files/jquery-1.8.3.min.js"></script>

<script>
	$("#button").click(addPlayer);
	var players = {};
    var worldLoaded = false;
	var three = {};
	
	function addPlayer() {
		var pID = Date.now();
		players[pID] = {};
		players[pID].pID = pID;
	}
	
    window.requestAnimFrame = (function(callback){
        return window.requestAnimationFrame ||
        window.webkitRequestAnimationFrame ||
        window.mozRequestAnimationFrame ||
        window.oRequestAnimationFrame ||
        window.msRequestAnimationFrame ||
        function(callback){
            window.setTimeout(callback, 1000 / 60);
        };
    })();
 
    function animate(lastTime, angularSpeed, three){
        // update
        var date = new Date();
        var time = date.getTime();
        var timeDiff = time - lastTime;
        var angleChange = angularSpeed * timeDiff * 2 * Math.PI / 1000;
		three.ship01.rotation.z += angleChange;
        lastTime = time;
		if (worldLoaded) {
			// run throu the player object

			for(var each in players) {
				if(players.hasOwnProperty(each)) {
					if(typeof players[each].Object3D === 'undefined') {
console.log( 'try');	
						players[each].Object3D = new THREE.Object3D();
						three.scene.add( players[each].Object3D );
						players[each].Object3D.position.x = Math.floor((Math.random()-0.5)*10);
						players[each].Object3D.position.z = Math.floor((Math.random()-0.5)*10);						
						var callbackTank01 = function ( geometry, materials ) { createSceneTank( geometry, materials ) };
						
						function createSceneTank( geometry, materials ) {
						
							var ship = new THREE.Mesh( geometry, new THREE.MeshFaceMaterial( materials ) );
							ship.name = 'ship';
							ship.rotation.x = -Math.PI/2;
							ship.scale.set( 0.5, 0.5, 0.5 );
							ship.castShadow = true;
							ship.receiveShadow = true;
							players[each].Object3D.add( ship );
						}						


						var loader = new THREE.JSONLoader();
						loader.load( "tank01.js", callbackTank01 ); 
						
					}
				}
			}
		}
        // render
        three.renderer.render(three.scene, three.camera);
 
        // request new frame
        requestAnimFrame(function(){
            animate(lastTime, angularSpeed, three);
// console.log( 'ras'		);	
        });
    }
	
	window.onload = function(){
		var angularSpeed = 0.2; // revolutions per second
        var lastTime = 0;
 
        var renderer = new THREE.WebGLRenderer();
        renderer.setSize(window.innerWidth, window.innerHeight);
        document.body.appendChild(renderer.domElement);
 
 
 // THREE BELOW
 
        // camera
        var camera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 1000);
        camera.position.y = -10;
        camera.position.z = -6;
		
		//Object3D
		var ship01;
		ship01 = new THREE.Object3D();
		var callbackFinished = function( result ) {
			ship01.add(result.scene);
		    animate(lastTime, angularSpeed, three);
			console.log(result);
			camera.lookAt( ship01.position );
			worldLoaded = true;
console.log( result );			
		}
 		var loader = new THREE.SceneLoader();
		loader.load( "scene.js", callbackFinished );


		
		
		
        // scene
        var scene = new THREE.Scene();
 
		scene.add(ship01);
		var light = new THREE.PointLight( 0xffffff );
		scene.add( light );
		light.position.x = -10;
		light.position.y = -15;
		light.position.z = -30;
		light.intensity = 1;
		scene.add( light );
 
 
        // create wrapper object that contains three.js objects
        three = {
            renderer: renderer,
            camera: camera,
            scene: scene,
			ship01: ship01
		};
console.log( 'three', three );	 
    };

</script>


<canvas width="1846" height="952" style="width: 1846px; height: 952px;"></canvas></body></html>